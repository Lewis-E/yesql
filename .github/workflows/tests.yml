name: Test

on: [push, pull_request]

jobs:
  test:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.2.0"]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Maps tcp port 5432 on service container to the host
        ports:
        - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_HOST_AUTH_METHOD: "trust"
          POSTGRES_DB: test
          POSTGRES_USER: postgres

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Python version
      run: python -c "import sys; print(f'Python {sys.version} on {sys.platform}')"

    - name: Install Linux dependencies
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        ./.github/ubuntu-install.sh
    - name: Install macOS dependencies
      if: startsWith(matrix.os, 'macos')
      run: |
        ./.github/macos-install.sh

    - name: Install Poetry
      uses: abatilo/actions-poetry@v2.1.3
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Cache Poetry virtualenv
      uses: actions/cache@v1
      id: cache
      with:
        path: ./.venv
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

    - name: Set Poetry config
      run: |
        poetry config virtualenvs.in-project true
        poetry config experimental.new-installer true
    - name: Set Poetry config (py3.10)
      if: matrix.python-version > 3.9
      run: |
        poetry config experimental.new-installer false
    - name: Install Dependencies
      if: ${{ !(startsWith(matrix.os, 'macos') && matrix.python-version >= 3.9) }}
      run: pip install -U setuptools && poetry install --no-dev -E tests

    - name: Install Dependencies (MacOS + Py3.9)
      if: ${{ startsWith(matrix.os, 'macos') && matrix.python-version >= 3.9 }}
      run: |
        OPENBLAS="$(brew --prefix openblas)" poetry install --no-dev -E tests

    - name: Test with pytest
      run: |
        poetry run pytest tests yesql --doctest-modules --cov --cov-config=.coveragerc --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        env_vars: OS,PYTHON
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
